I have a problem in mapUriToFilePath first this is my configuration server:
server
{
	listen				1024;
	host      			127.0.0.1;
	server_name 		_;
	limit_client_body   10000000000000;
	error_page    		301  /home/zasabri/Desktop/errors;
	error_page      	304  /home/zasabri/Desktop/errorsat;
	default_root /nfs/homes/ysabr/Desktop/web/var/www/html;
	location /to
	{
		root				/nfs/homes/ysabr/Desktop/web/var/www/html;
		index				alah.mp4 index.php index.html;
		allowed_methodes	POST GET DELETE;
		autoindex			on;
		# return				301 	http://www.google.com;
		# upload				on  /nfs/homes/yachaab/Desktop/web-server/upload;
		cgi					off;
	}
	location /
	{
		root				/nfs/homes/ysabr/Desktop/web/var/www/html;
		index				alah.mp4 index.php index.html;
		allowed_methodes	POST GET DELETE;
		autoindex			on;
		# return				301 	http://www.google.com;
		# upload				on  /nfs/homes/yachaab/Desktop/web-server/upload;
		cgi					off;
	}
	location /to2
	{
		root				/nfs/homes/ysabr/Desktop/web/var/www/html;
		index				alah.mp4 index.php index.html;
		allowed_methodes	POST GET DELETE;
		autoindex			on;
		# return				301 	http://www.google.com;
		# upload				on  /nfs/homes/yachaab/Desktop/web-server/upload;
		cgi					off;
	}
	location /to3
	{
		root				/nfs/homes/ysabr/Desktop/web/var/www/html;
		index				alah.mp4 index.php index.html;
		allowed_methodes	POST GET DELETE;
		autoindex			on;
		# return				301 	http://www.google.com;
		# upload				on  /nfs/homes/yachaab/Desktop/web-server/upload;
		cgi					off;
	}
	location /movie
	{
		root /nfs/sgoinfre/goinfre/Perso/zasabri;
		index One.Flew.Over.The.Cuckoo__x27_s.Nest.1975.1080p.BluRay.MyCima.TO.mp4;
	}
}

and I write in url : localhost:1024/to/ and he must go in location /to/ and try to get the root of the location and try to 
loop in index for check the index.html or index.mp4 or alah.mp4 or something that I give it in if I give them
localhost:1024/to/ he must give me the first index found in the path when I join and check but he give me not found 
this is my code can you fix it : 
#include "../include/mainHeader.hpp"
#include <fcntl.h>
#include <fstream>

std::string getMimeType(std::string& filePath)
{
    std::map<std::string, std::string> mimeTypes;
    mimeTypes[".html"] = "text/html";
    mimeTypes[".css"] = "text/css";
    mimeTypes[".js"] = "application/javascript";
    mimeTypes[".json"] = "application/json";
    mimeTypes[".png"] = "image/png";
    mimeTypes[".jpg"] = "image/jpeg";
    mimeTypes[".jpeg"] = "image/jpeg";
    mimeTypes[".gif"] = "image/gif";
    mimeTypes[".svg"] = "image/svg+xml";
    mimeTypes[".xml"] = "application/xml";
    mimeTypes[".pdf"] = "application/pdf";
    mimeTypes[".txt"] = "text/plain";
    mimeTypes[".mp3"] = "audio/mpeg";
    mimeTypes[".mp4"] = "video/mp4";
    size_t dotPos = filePath.rfind('.');
    if (dotPos != std::string::npos)
    {
        std::string extension = filePath.substr(dotPos);
        if (mimeTypes.find(extension) != mimeTypes.end())
            return mimeTypes[extension];
    }
    return "text/plain";
}

bool fileExists( std::string& path) {
    struct stat buffer;
    return (stat(path.c_str(), &buffer) == 0);
}

bool hasReadPermission(const std::string& path) {
    return (access(path.c_str(), R_OK) == 0);
}


std::string mapUriToFilePath(std::string& uri, location& locConfig, bool& foundLocation)
{
    std::string rootPath = locConfig.root["root"];
    std::string filePath = rootPath;
    std::string uriCopy = uri; // Make a copy of uri for manipulation
    std::cout << "uRI: " << uriCopy << std::endl;
    // Try to strip the location part if location was not found
    if (!foundLocation)
    {
        size_t secondSlashPos = uriCopy.find('/', 1); // Find the second slash
        if (secondSlashPos != std::string::npos) {
            uriCopy = uriCopy.substr(secondSlashPos); // Strip the location part
        }
    }
    std::cout << "uriCopyuriCopy: " << uriCopy << std::endl;


    filePath += uriCopy; // Construct the full file path
    std::cout << "filePathfilePathfilePath: " << filePath << std::endl;

    // Check for file existence and permissions
    struct stat fileInfo;
    if (stat(filePath.c_str(), &fileInfo) != 0) {
        return "404"; // File not found
    } else if ((fileInfo.st_mode & S_IROTH) == 0) {
        return ""; // Forbidden due to lack of read permissions
    }

    return filePath; // File found and accessible
}

location findRouteConfig(std::string& uri, const informations& serverConfig, bool& defaultFound)
{
    size_t longestMatch = 0;
    location defaultLocation;

    // Attempt to find a matching location configuration
    for (size_t i = 0; i < serverConfig.locationsInfo.size(); ++i)
    {
        const location& loc = serverConfig.locationsInfo[i];
        const std::string& locPath = loc.directory.find("location") != loc.directory.end() ? loc.directory.at("location") : "";
        if (uri.compare(0, locPath.length(), locPath) == 0 && locPath.length() > longestMatch) {
            longestMatch = locPath.length();
            defaultLocation = loc;
        }
        if (locPath == "/") {
            defaultFound = true; // Mark that we've found a default ("/") location
        }
    }

    // Use the first location as the default if no "/" location is defined
    if (!defaultFound && !serverConfig.locationsInfo.empty()) {
        defaultLocation = serverConfig.locationsInfo[0];
    }

    // Check if we have a global defaultRoot defined and no location matched
    if (serverConfig.defaultRoot.find("default_root") != serverConfig.defaultRoot.end() && longestMatch == 0) {
        defaultLocation.root["root"] = serverConfig.defaultRoot.at("default_root");
    }

    return defaultLocation;
}

bool isRegularFile(const std::string& path)
{
    struct stat statbuf;
    if (stat(path.c_str(), &statbuf) != 0)
        return false;
    return S_ISREG(statbuf.st_mode);
}

bool isDirectory(const std::string& path)
{
    struct stat statbuf;
    if (stat(path.c_str(), &statbuf) != 0)
        return false;
    return S_ISDIR(statbuf.st_mode);
}
std::string generateDirectoryListing(const std::string& path)
{
    DIR *dir;
    struct dirent *ent;
    std::ostringstream html;
    std::cout << "path dire: " << path << std::endl;
    html << "<html><head><title>Index of " << path << "</title></head><body>";
    html << "<h1>Index of " << path << "</h1><hr><pre>";

    dir = opendir(path.c_str());
    if (dir != NULL)
    {
        std::cout << "dir: " << dir << std::endl;
        while ((ent = readdir(dir)) != NULL)
            html << "<a href='" << ent->d_name << "'>" << ent->d_name << "</a><br>";
        closedir(dir);
    }
    else
        html << "Cannot access directory.";
    html << "</pre><hr></body></html>";
    return html.str();
}

std::string to_string(int value)
{
    std::ostringstream os;
    os << value;
    return os.str();
}

void connection::handleRequestGET(int clientSocket, Request& request,const informations& serverConfig)
{
    bool foundLocation = false;
    location routeConfig = findRouteConfig(request.headers["uri"], serverConfig, foundLocation);
    if (routeConfig.allowed_methodes["allowed_methodes"].find("GET") == std::string::npos)
    {
        serveErrorPage(clientSocket, 405, serverConfig);
        return;
    }
    std::map<std::string, std::string>::iterator it = routeConfig.Return.find("return");
    if ( it != routeConfig.Return.end() && !it->second.empty())
    {
        std::string redirectURL = it->second; // URL to redirect to
        std::cout << "==========================>: RedirectURL: " << redirectURL << std::endl;
        std::string responseD = "HTTP/1.1 301 Moved Permanently\r\n";
        responseD += "Location: " + redirectURL + "\r\n";
        responseD += "Content-Length: 0\r\n";
        responseD += "Connection: close\r\n\r\n";
        response responseData;
        responseData.setResponseHeader(responseD);
        request.storeHeader = true;
        Response[clientSocket] = responseData;
        return;
    }
    else
    {
        std::map<std::string, std::string>::const_iterator it = routeConfig.directory.find("location");
        std::cout << "Location test: ++++++++========>: " << it->second << std::endl;
        std::string filePath2 = mapUriToFilePath(request.headers["uri"], routeConfig, foundLocation);
        std::cout << "===========>: " << filePath2 << std::endl;
        std::string filePath = filePath2;
        // if (routeConfig.cgi.at("cgi") == "on")
        // {
        //     //work on cgi now you can use anything you want ba3bab3a3bab3abb3abab3aba3b
        // }

            // Check if the file exists and has read permission
    if (!fileExists(filePath)) {
        serveErrorPage(clientSocket, 404, serverConfig); // File not found
        return;
    }
    if (!hasReadPermission(filePath)) {
        serveErrorPage(clientSocket, 403, serverConfig); // Forbidden
        return;
    }
        // if (!access(filePath.c_str(), F_OK))
        // {
        //     if (access(filePath.c_str(), R_OK))
        //     {
        //         serveErrorPage(clientSocket, 403, serverConfig);
        //         return;
        //     }
        // }
        // else
        // {
        //     serveErrorPage(clientSocket, 404, serverConfig); // Not Found
        //     return;
        // }
        // if (!fileExists(filePath))
        // {
        //     std::cout << "===========================================><><><>\n";
        //         serveErrorPage(clientSocket, 404, serverConfig);
        //         return;
        // }
        std::cout << "=======>: path: " << filePath << std::endl;
        std::string responseD;
        if (isDirectory(filePath))
        {
            std::vector<location>::const_iterator it = serverConfig.locationsInfo.begin();
            std::string check = request.headers["uri"] + it->index.at("index");
            std::map<std::string, std::string>::iterator autoindexIt = routeConfig.autoindex.find("autoindex");
            if (isRegularFile(check))
            {
                responseD = "HTTP/1.1 301 OK\r\n";
                responseD += "Location: " + check + " \r\n";
            }
            else if (autoindexIt != routeConfig.autoindex.end() && autoindexIt->second == "on")
            {
                std::string directoryContent = generateDirectoryListing(filePath);
                std::cout << directoryContent << std::endl;
                responseD = "HTTP/1.1 200 OK\r\n";
                responseD += "Content-Type: text/html\r\n";
                responseD += "Content-Length: " + to_string(directoryContent.size()) + "\r\n";
                
                responseD += "\r\n";
                responseD += directoryContent;
            }
        }
        else
        {
            responseD = "HTTP/1.1 200 OK\r\n";
            responseD += "Content-Type: " + getMimeType(filePath) + "\r\n";
            // std::cout << "check if this correct" << std::endl;;
            /* -------------- yachaab code start ----------------- */
            // std::fstream file;
            // file.open( "./media/video/morpho.mp4", std::fstream::binary | std::fstream::ate | std::fstream::in );
            // size_t size = file.tellg();
            // file.close();
            // // std::cout << "size: " << size << std::endl;
            // responseD += "Content-Length: " + to_string( size ) + "\r\n";
            // std::cout << "MIME TYPE: " << getMimeType(filePath) << std::endl;
            // std::cout << "content length: " << xnxx << std::endl;
            /*-------------- yachaab code ended -----------------*/
        }
        // if (request.flagRespons == 0)
        // {
            response responseData;

            responseData.filePath = filePath;
            responseData.setResponseHeader(responseD);
            request.storeHeader = true;
            Response[clientSocket] = responseData;

    }
}
